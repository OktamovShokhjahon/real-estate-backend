const mongoose = require("mongoose");
const PropertyReview = require("./models/PropertyReview");
const User = require("./models/User");

// Connect to MongoDB
mongoose
  .connect(process.env.MONGODB_URI || "mongodb://127.0.0.1/prokvartirukz", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("MongoDB connected for sample data creation"))
  .catch((err) => console.log("MongoDB connection error:", err));

async function createSampleData() {
  try {
    console.log("Creating sample data for search testing...");

    // First, create a sample user if none exists
    let sampleUser = await User.findOne({ email: "test@example.com" });

    if (!sampleUser) {
      console.log("Creating sample user...");
      sampleUser = new User({
        firstName: "–¢–µ—Å—Ç",
        lastName: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        email: "test@example.com",
        password: "testpassword123",
        emailVerified: true,
        role: "user",
      });
      await sampleUser.save();
      console.log("‚úì Sample user created:", sampleUser._id);
    } else {
      console.log("‚úì Sample user already exists:", sampleUser._id);
    }

    // Check if sample reviews already exist
    const existingReviews = await PropertyReview.countDocuments({
      city: "–ê–ª–º–∞—Ç—ã",
      street: "—É–ª. –ê–±–∞—è",
      building: "15",
    });

    if (existingReviews === 0) {
      console.log("Creating sample reviews...");

      const sampleReviews = [
        {
          title: "–û—Ç–ª–∏—á–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ",
          content:
            "–û—á–µ–Ω—å —É–¥–æ–±–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞, —Ö–æ—Ä–æ—à–∏–π —Ä–µ–º–æ–Ω—Ç, —Ç–∏—Ö–∏–π —Ä–∞–π–æ–Ω. –†—è–¥–æ–º –µ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ø–∞—Ä–∫. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º, –∫—Ç–æ –∏—â–µ—Ç –∂–∏–ª—å–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞.",
          rating: 5,
          author: sampleUser._id,
          city: "–ê–ª–º–∞—Ç—ã",
          street: "—É–ª. –ê–±–∞—è",
          building: "15",
          reviewType: "property",
          isApproved: true,
          numberOfRooms: 2,
          floor: 5,
          totalFloors: 9,
          area: 65,
          price: 250000,
          currency: "KZT",
        },
        {
          title: "–ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π - –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∂–∏–∑–Ω–∏",
          content:
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å —Å —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π. –ö—Ä–∞—Å–∏–≤—ã–π –¥–≤–æ—Ä, –¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞, –ø–æ–¥–∑–µ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞. –û—Ö—Ä–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7.",
          rating: 4,
          author: sampleUser._id,
          city: "–ê–ª–º–∞—Ç—ã",
          street: "—É–ª. –ê–±–∞—è",
          building: "15",
          reviewType: "residentialComplex",
          isApproved: true,
          residentialComplex: "–ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π",
        },
        {
          title: "–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –æ—á–µ–Ω—å –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –∏ —á–µ—Å—Ç–Ω—ã–π",
          content:
            "–í—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞. –û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ–º.",
          rating: 5,
          author: sampleUser._id,
          city: "–ê–ª–º–∞—Ç—ã",
          street: "—É–ª. –ê–±–∞—è",
          building: "15",
          reviewType: "landlord",
          isApproved: true,
          landlordName: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á",
          landlordPhone: "+7-777-123-45-67",
        },
        {
          title: "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
          content:
            "–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–ª–∞—Ç–∏–ª –∞—Ä–µ–Ω–¥—É, —Å–æ–¥–µ—Ä–∂–∞–ª –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ —á–∏—Å—Ç–æ—Ç–µ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —à—É–º–µ–ª, —É–≤–∞–∂–∞–ª —Å–æ—Å–µ–¥–µ–π. –û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Ç–∞–∫–∏–º –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º.",
          rating: 4,
          author: sampleUser._id,
          city: "–ê–ª–º–∞—Ç—ã",
          street: "—É–ª. –ê–±–∞—è",
          building: "15",
          reviewType: "tenant",
          isApproved: true,
          tenantName: "–ê–ª–µ–∫—Å–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
          tenantPhone: "+7-777-987-65-43",
        },
        {
          title: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ —É–ª. –î–æ—Å—Ç—ã–∫",
          content:
            "–•–æ—Ä–æ—à–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ç–∏—Ö–æ–º —Ä–∞–π–æ–Ω–µ. –ù–µ–¥–∞–ª–µ–∫–æ –æ—Ç –º–µ—Ç—Ä–æ, –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ. –†–µ–º–æ–Ω—Ç —Å—Ä–µ–¥–Ω–∏–π, –Ω–æ —Ü–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤—É.",
          rating: 3,
          author: sampleUser._id,
          city: "–ê–ª–º–∞—Ç—ã",
          street: "—É–ª. –î–æ—Å—Ç—ã–∫",
          building: "25",
          reviewType: "property",
          isApproved: true,
          numberOfRooms: 1,
          floor: 3,
          totalFloors: 5,
          area: 45,
          price: 180000,
          currency: "KZT",
        },
        {
          title: "–ñ–ö –Ω–∞ —É–ª. –¢–æ–ª–µ –±–∏",
          content:
            "–ù–æ–≤—ã–π –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–æ–π. –•–æ—Ä–æ—à–∞—è –∑–≤—É–∫–æ–∏–∑–æ–ª—è—Ü–∏—è, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏.",
          rating: 4,
          author: sampleUser._id,
          city: "–ê–ª–º–∞—Ç—ã",
          street: "—É–ª. –¢–æ–ª–µ –±–∏",
          building: "10",
          reviewType: "residentialComplex",
          isApproved: true,
          residentialComplex: "–ñ–ö –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π",
        },
      ];

      for (const reviewData of sampleReviews) {
        const review = new PropertyReview(reviewData);
        await review.save();
        console.log(`‚úì Created review: ${review.title}`);
      }

      console.log(`‚úÖ Created ${sampleReviews.length} sample reviews`);
    } else {
      console.log(`‚úì Sample reviews already exist (${existingReviews} found)`);
    }

    // Display search test results
    console.log("\nüîç Testing search functionality...");

    const citySearch = await PropertyReview.find({
      city: new RegExp("–ê–ª–º–∞—Ç—ã", "i"),
      isApproved: true,
    }).countDocuments();
    console.log(`‚úì Reviews in –ê–ª–º–∞—Ç—ã: ${citySearch}`);

    const streetSearch = await PropertyReview.find({
      street: new RegExp("–ê–±–∞—è", "i"),
      isApproved: true,
    }).countDocuments();
    console.log(`‚úì Reviews on —É–ª. –ê–±–∞—è: ${streetSearch}`);

    const buildingSearch = await PropertyReview.find({
      building: new RegExp("15", "i"),
      isApproved: true,
    }).countDocuments();
    console.log(`‚úì Reviews in building 15: ${buildingSearch}`);

    console.log("\n‚úÖ Sample data creation completed!");
    console.log("\nüìù To test the search functionality:");
    console.log("1. Start the backend server: npm start");
    console.log("2. Start the frontend: npm run dev");
    console.log("3. Navigate to /search page");
    console.log("4. Try searching for: –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è, 15");
  } catch (error) {
    console.error("‚ùå Error creating sample data:", error);
  } finally {
    await mongoose.disconnect();
    console.log("MongoDB disconnected");
  }
}

createSampleData();
